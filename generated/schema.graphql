"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `App`."""
  allApps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `App`."""
    orderBy: [AppsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AppCondition
  ): AppsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection

  """Reads and enables pagination through a set of `UserSetting`."""
  allUserSettings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSettingCondition
  ): UserSettingsConnection
  appById(id: Int!): App
  userById(id: Int!): User
  userBySub(sub: String!): User
  userSettingById(id: Int!): UserSetting

  """Reads a single `App` using its globally unique `ID`."""
  app(
    """The globally unique `ID` to be used in selecting a single `App`."""
    nodeId: ID!
  ): App

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `UserSetting` using its globally unique `ID`."""
  userSetting(
    """
    The globally unique `ID` to be used in selecting a single `UserSetting`.
    """
    nodeId: ID!
  ): UserSetting
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `App` values."""
type AppsConnection {
  """A list of `App` objects."""
  nodes: [App]!

  """
  A list of edges which contains the `App` and cursor to aid in pagination.
  """
  edges: [AppsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `App` you could get from the connection."""
  totalCount: Int!
}

type App implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  playstoreUrl: String
  appstoreUrl: String
  description: String
}

"""A `App` edge in the connection."""
type AppsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `App` at the end of the edge."""
  node: App
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `App`."""
enum AppsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PLAYSTORE_URL_ASC
  PLAYSTORE_URL_DESC
  APPSTORE_URL_ASC
  APPSTORE_URL_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `App` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AppCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `playstoreUrl` field."""
  playstoreUrl: String

  """Checks for equality with the object’s `appstoreUrl` field."""
  appstoreUrl: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  sub: String!
  type: String!
  userSettingsId: Int!

  """Reads a single `UserSetting` that is related to this `User`."""
  userSettingByUserSettingsId: UserSetting
}

type UserSetting implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """Reads and enables pagination through a set of `User`."""
  usersByUserSettingsId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SUB_ASC
  SUB_DESC
  TYPE_ASC
  TYPE_DESC
  USER_SETTINGS_ID_ASC
  USER_SETTINGS_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sub` field."""
  sub: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `userSettingsId` field."""
  userSettingsId: Int
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""A connection to a list of `UserSetting` values."""
type UserSettingsConnection {
  """A list of `UserSetting` objects."""
  nodes: [UserSetting]!

  """
  A list of edges which contains the `UserSetting` and cursor to aid in pagination.
  """
  edges: [UserSettingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserSetting` you could get from the connection."""
  totalCount: Int!
}

"""A `UserSetting` edge in the connection."""
type UserSettingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserSetting` at the end of the edge."""
  node: UserSetting
}

"""Methods to use when ordering `UserSetting`."""
enum UserSettingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserSetting` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserSettingCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `App`."""
  createApp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAppInput!
  ): CreateAppPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserSetting`."""
  createUserSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserSettingInput!
  ): CreateUserSettingPayload

  """Updates a single `App` using its globally unique id and a patch."""
  updateApp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAppInput!
  ): UpdateAppPayload

  """Updates a single `App` using a unique key and a patch."""
  updateAppById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAppByIdInput!
  ): UpdateAppPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserBySub(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserBySubInput!
  ): UpdateUserPayload

  """
  Updates a single `UserSetting` using its globally unique id and a patch.
  """
  updateUserSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSettingInput!
  ): UpdateUserSettingPayload

  """Updates a single `UserSetting` using a unique key and a patch."""
  updateUserSettingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSettingByIdInput!
  ): UpdateUserSettingPayload

  """Deletes a single `App` using its globally unique id."""
  deleteApp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAppInput!
  ): DeleteAppPayload

  """Deletes a single `App` using a unique key."""
  deleteAppById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAppByIdInput!
  ): DeleteAppPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserBySub(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserBySubInput!
  ): DeleteUserPayload

  """Deletes a single `UserSetting` using its globally unique id."""
  deleteUserSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSettingInput!
  ): DeleteUserSettingPayload

  """Deletes a single `UserSetting` using a unique key."""
  deleteUserSettingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSettingByIdInput!
  ): DeleteUserSettingPayload
}

"""The output of our create `App` mutation."""
type CreateAppPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `App` that was created by this mutation."""
  app: App

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `App`. May be used by Relay 1."""
  appEdge(
    """The method to use when ordering `App`."""
    orderBy: [AppsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppsEdge
}

"""All input for the create `App` mutation."""
input CreateAppInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `App` to be created by this mutation."""
  app: AppInput!
}

"""An input for mutations affecting `App`"""
input AppInput {
  id: Int
  name: String!
  playstoreUrl: String
  appstoreUrl: String
  description: String
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `UserSetting` that is related to this `User`."""
  userSettingByUserSettingsId: UserSetting

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  sub: String!
  type: String
  userSettingsId: Int
  userSettingToUserSettingsId: UserSettingsFkInput
}

"""
Input for the nested mutation of `userSetting` in the `UserInput` mutation.
"""
input UserSettingsFkInput {
  """
  The primary key(s) for `userSetting` for the far side of the relationship.
  """
  connectById: UserSettingUserSettingPkeyConnect

  """
  The primary key(s) for `userSetting` for the far side of the relationship.
  """
  connectByNodeId: UserSettingNodeIdConnect

  """
  The primary key(s) for `userSetting` for the far side of the relationship.
  """
  deleteById: UserSettingUserSettingPkeyDelete

  """
  The primary key(s) for `userSetting` for the far side of the relationship.
  """
  deleteByNodeId: UserSettingNodeIdDelete

  """
  The primary key(s) and patch data for `userSetting` for the far side of the relationship.
  """
  updateById: UserSettingOnUserForUserSettingsFkUsingUserSettingPkeyUpdate

  """
  The primary key(s) and patch data for `userSetting` for the far side of the relationship.
  """
  updateByNodeId: UserOnUserForUserSettingsFkNodeIdUpdate

  """
  A `UserSettingInput` object that will be created and connected to this object.
  """
  create: UserSettingsFkUserSettingsCreateInput
}

"""The fields on `userSetting` to look up the row to connect."""
input UserSettingUserSettingPkeyConnect {
  id: Int!
}

"""The globally unique `ID` look up for the row to connect."""
input UserSettingNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `userSetting` to be connected.
  """
  nodeId: ID!
}

"""The fields on `userSetting` to look up the row to delete."""
input UserSettingUserSettingPkeyDelete {
  id: Int!
}

"""The globally unique `ID` look up for the row to delete."""
input UserSettingNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `userSetting` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `userSetting` to look up the row to update."""
input UserSettingOnUserForUserSettingsFkUsingUserSettingPkeyUpdate {
  """
  An object where the defined keys will be set on the `userSetting` being updated.
  """
  userSettingPatch: updateUserSettingOnUserForUserSettingsFkPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `userSetting` being updated.
"""
input updateUserSettingOnUserForUserSettingsFkPatch {
  id: Int
  usersUsingId: UserSettingsFkInverseInput
}

"""
Input for the nested mutation of `user` in the `UserSettingInput` mutation.
"""
input UserSettingsFkInverseInput {
  """
  Flag indicating whether all other `user` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: [UserUserPkeyConnect!]

  """The primary key(s) for `user` for the far side of the relationship."""
  connectBySub: [UserUserSubUniqueConnect!]

  """The primary key(s) for `user` for the far side of the relationship."""
  connectByNodeId: [UserNodeIdConnect!]

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteById: [UserUserPkeyDelete!]

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteBySub: [UserUserSubUniqueDelete!]

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteByNodeId: [UserNodeIdDelete!]

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: [UserOnUserForUserSettingsFkUsingUserPkeyUpdate!]

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateBySub: [UserOnUserForUserSettingsFkUsingUserSubUniqueUpdate!]

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: [UserSettingOnUserForUserSettingsFkNodeIdUpdate!]

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: [UserSettingsFkUserCreateInput!]
}

"""The fields on `user` to look up the row to connect."""
input UserUserPkeyConnect {
  id: Int!
}

"""The fields on `user` to look up the row to connect."""
input UserUserSubUniqueConnect {
  sub: String!
}

"""The globally unique `ID` look up for the row to connect."""
input UserNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!
}

"""The fields on `user` to look up the row to delete."""
input UserUserPkeyDelete {
  id: Int!
}

"""The fields on `user` to look up the row to delete."""
input UserUserSubUniqueDelete {
  sub: String!
}

"""The globally unique `ID` look up for the row to delete."""
input UserNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `user` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `user` to look up the row to update."""
input UserOnUserForUserSettingsFkUsingUserPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: updateUserOnUserForUserSettingsFkPatch!
  id: Int!
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnUserForUserSettingsFkPatch {
  id: Int
  sub: String
  type: String
  userSettingToUserSettingsId: UserSettingsFkInput
}

"""The fields on `user` to look up the row to update."""
input UserOnUserForUserSettingsFkUsingUserSubUniqueUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: updateUserOnUserForUserSettingsFkPatch!
  sub: String!
}

"""The globally unique `ID` look up for the row to update."""
input UserSettingOnUserForUserSettingsFkNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  sub: String
  type: String
  userSettingsId: Int
  userSettingToUserSettingsId: UserSettingsFkInput
}

"""The `user` to be created by this mutation."""
input UserSettingsFkUserCreateInput {
  id: Int
  sub: String!
  type: String
  userSettingToUserSettingsId: UserSettingsFkInput
}

"""The globally unique `ID` look up for the row to update."""
input UserOnUserForUserSettingsFkNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `userSetting` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `userSetting` being updated.
  """
  userSettingPatch: UserSettingPatch!
}

"""
Represents an update to a `UserSetting`. Fields that are set will be updated.
"""
input UserSettingPatch {
  id: Int
  usersUsingId: UserSettingsFkInverseInput
}

"""The `userSetting` to be created by this mutation."""
input UserSettingsFkUserSettingsCreateInput {
  id: Int
  usersUsingId: UserSettingsFkInverseInput
}

"""The output of our create `UserSetting` mutation."""
type CreateUserSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSetting` that was created by this mutation."""
  userSetting: UserSetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSetting`. May be used by Relay 1."""
  userSettingEdge(
    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSettingsEdge
}

"""All input for the create `UserSetting` mutation."""
input CreateUserSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserSetting` to be created by this mutation."""
  userSetting: UserSettingInput!
}

"""An input for mutations affecting `UserSetting`"""
input UserSettingInput {
  id: Int
  usersUsingId: UserSettingsFkInverseInput
}

"""The output of our update `App` mutation."""
type UpdateAppPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `App` that was updated by this mutation."""
  app: App

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `App`. May be used by Relay 1."""
  appEdge(
    """The method to use when ordering `App`."""
    orderBy: [AppsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppsEdge
}

"""All input for the `updateApp` mutation."""
input UpdateAppInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `App` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `App` being updated.
  """
  appPatch: AppPatch!
}

"""Represents an update to a `App`. Fields that are set will be updated."""
input AppPatch {
  id: Int
  name: String
  playstoreUrl: String
  appstoreUrl: String
  description: String
}

"""All input for the `updateAppById` mutation."""
input UpdateAppByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `App` being updated.
  """
  appPatch: AppPatch!
  id: Int!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `UserSetting` that is related to this `User`."""
  userSettingByUserSettingsId: UserSetting

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  id: Int!
}

"""All input for the `updateUserBySub` mutation."""
input UpdateUserBySubInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  sub: String!
}

"""The output of our update `UserSetting` mutation."""
type UpdateUserSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSetting` that was updated by this mutation."""
  userSetting: UserSetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSetting`. May be used by Relay 1."""
  userSettingEdge(
    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSettingsEdge
}

"""All input for the `updateUserSetting` mutation."""
input UpdateUserSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSetting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserSetting` being updated.
  """
  userSettingPatch: UserSettingPatch!
}

"""All input for the `updateUserSettingById` mutation."""
input UpdateUserSettingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserSetting` being updated.
  """
  userSettingPatch: UserSettingPatch!
  id: Int!
}

"""The output of our delete `App` mutation."""
type DeleteAppPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `App` that was deleted by this mutation."""
  app: App
  deletedAppId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `App`. May be used by Relay 1."""
  appEdge(
    """The method to use when ordering `App`."""
    orderBy: [AppsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppsEdge
}

"""All input for the `deleteApp` mutation."""
input DeleteAppInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `App` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAppById` mutation."""
input DeleteAppByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `UserSetting` that is related to this `User`."""
  userSettingByUserSettingsId: UserSetting

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserBySub` mutation."""
input DeleteUserBySubInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sub: String!
}

"""The output of our delete `UserSetting` mutation."""
type DeleteUserSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSetting` that was deleted by this mutation."""
  userSetting: UserSetting
  deletedUserSettingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSetting`. May be used by Relay 1."""
  userSettingEdge(
    """The method to use when ordering `UserSetting`."""
    orderBy: [UserSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSettingsEdge
}

"""All input for the `deleteUserSetting` mutation."""
input DeleteUserSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSetting` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserSettingById` mutation."""
input DeleteUserSettingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}
